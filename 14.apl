⍝ day 14

⍝ ============================================================
⍝ part 1, solution
⍝ ============================================================

      load←{(⎕UCS 10)(≠⊆⊢)⊃⎕NGET AoCPath,⍵}
      conv←{
          t←⎕A⍳⊃⍵
          r←(1↓⍳⍴⍵)⊃¨⊂⍵
          m←26 26⍴0
          dummy←{
              m[⎕A⍳⍵[1];⎕A⍳⍵[2]]←⎕A⍳⍵[7] ⋄ ⍬
          }¨r
          (⊂t),⊂m
      }

      distinct←{((⍵⍳⍵)=⍳⍴⍵)/⍵}

∇r←step t;n;x;i
 n←1,¯1+⍴t
 i←m[↓⍉(n⍴¯1↓t),[1]n⍴1↓t]
 x←2|⍳¯1+2×⍴t
 r←(x\t)+(1-x)\i
∇

      freqd←{
          f←+/(distinct ⍵)∘.=⍵
          {(¯1↑⍵)-1↑⍵}f[⍋f]
      }

      (t m)←conv load'14.test'
      freqd(step⍣10)t
1588

⍝ ============================================================
⍝ part 2, solution
⍝ ============================================================

      )copy vnum   ⍝ bignum integer arithmetic functions

∇r←repr t;u;n
 u←26 26⍴⊂0
 n←1,¯1+⍴t
 {(y x)←⍵ ⋄ u[y;x]←⊂vinc⊃u[y;x]}¨↓⍉(n⍴¯1↓t),[1]n⍴1↓t
 r←u
∇

      ig←{i←¯1+(,↑0≠,⍵)/⍳×/⍴⍵ ⋄ ⍉1+(⍴⍵)⊤i}

∇r←step2 u;incr;decr
 incr←decr←26 26⍴⊂vzero
 {update ⍵}¨↓ig u
 r←u{(⊃⍺)vadd⊃⍵}¨incr
 r←r{(⊃⍺)vsub⊃⍵}¨decr
∇

∇r←update i;n;a;b;c
 (a b)←i
 n←⊃u[a;b]
 decr[a;b]←⊂n vadd⊃decr[a;b] ⍝ old pair
 c←m[a;b]
 incr[a;c]←⊂n vadd⊃incr[a;c] ⍝ new pairs
 incr[c;b]←⊂n vadd⊃incr[c;b]
∇

⍝ ============================================================
⍝ guide
⍝ ============================================================

⍝ Solution part 1 once more uses a naive approach, and simply
⍝ manipulates strings, starting from the template.

      DISPLAY conv load'14.test'
┌→─────────────────────────────────────────────────────────────────────┐
│ ┌→────────┐ ┌→─────────────────────────────────────────────────────┐ │
│ │14 14 3 2│ ↓0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│ └~────────┘ │0 14  2 0 0 0 0  8 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  8 14 0 0 0 0  2 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  3  2 0 0 0 0 14 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  2  2 0 0 0 0  3 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             │0  0  0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│ │
│             └~─────────────────────────────────────────────────────┘ │
└∊─────────────────────────────────────────────────────────────────────┘

      (t m)←conv load'14.test'
      (2|⍳¯1+2×⍴t)
1 0 1 0 1 0 1
      x←(2|⍳¯1+2×⍴t)
      x\t
14 0 14 0 3 0 2⍝ 

      ⍉(1 3⍴¯1↓t),[1](1 3⍴1↓t)
14 14
14  3
 3  2
      m[↓⍉(1 3⍴¯1↓t),[1](1 3⍴1↓t)]
3 2 8
      (1-x)\m[↓⍉(1 3⍴¯1↓t),[1](1 3⍴1↓t)]
0 3 0 2 0 8 0

      ⍴(step⍣2)t
13
      ⍴(step⍣3)t
25
      ⍴(step⍣4)t
49
      ⍴(step⍣5)t
97
      ⍴(step⍣10)t
3073

⍝ On to part 2. Once more, the naive solution does not scale, since
⍝ the polymer strings grow too fast and require too much memory.
⍝ Again, the exact *sequence* of bindings is not required,
⍝ so once more we represent the current polymer by the count of its
⍝ known binding pairs. (Note that the last residue will need to be
⍝ counted separately, since it is only the "minor" part of the last
⍝ pair.)

      u←repr t

      DISPLAY vadd/(step2⍣3)u
┌→─────────────────────────────────────────────────────────────────────────────
│ ┌→┐ ┌→──┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐
│ │0│ │0 1│ │5│ │0│ │0│ │0│ │0│ │4│ │0│ │0│ │0│ │0│ │0│ │5│ │0│ │0│ │0│ │0│ │0│
│ └~┘ └~──┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘
└∊─────────────────────────────────────────────────────────────────────────────

      ─────────────────────────────┐
       ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ ┌→┐ │
       │0│ │0│ │0│ │0│ │0│ │0│ │0│ │
       └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ └~┘ │
      ─────────────────────────────┘
⍝ 
⍝ 
⍝ TODO
