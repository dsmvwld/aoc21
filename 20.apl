⍝ day 20: Trench Map

⍝ ============================================================
⍝ part 1, solution
⍝ ============================================================

      load←{(⎕UCS 10)(≠⊆⊢)⊃⎕NGET AoCPath,⍵}
      pad←{a←-⍺ ⋄ a⊖a⌽((2×⍺)+⍴⍵)↑⍵}
      lut←'?'

∇r←use fn;content
 content←load fn
 lut←'#'=1⊃content
 r←'#'=↑1↓content
∇

      pow←3 3⍴2*⌽¯1+⍳9
      enhance←{lut[1+⊃+/+/pow×¯1 0 1∘.⊖¯1 0 1⌽¨⊂3 pad ⍵]}
      plot←{'.#'[1+⍵]}

      +/+/enhance enhance use '20.test'
35

      ⍝ additional steps for actual input:
      enhance←{lut[1+⊃+/+/pow×¯1 0 1∘.⊖¯1 0 1⌽¨⊂⍵]}
      unpad←{((⍴⍵)-2×⍺)↑⍺⌽⍺⊖⍵}
      denhance←{18 unpad enhance 10 pad enhance 10 pad ⍵}

⍝ ============================================================
⍝ part 2, solution
⍝ ============================================================

      +/+/(denhance⍣25) use '20.test'
3351

⍝ ============================================================
⍝ guide
⍝ ============================================================

      m←use '20.test'
      m
1 0 0 1 0
1 0 0 0 0
1 1 0 0 1
0 0 1 0 0
0 0 1 1 1

      DISPLAY ¯1 0 1∘.⊖¯1 0 1⌽¨⊂3 pad m
┌→────────────────────────────────────────────────────────────────────────┐
↓ ┌→────────────────────┐ ┌→────────────────────┐ ┌→────────────────────┐ │
│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 1 0 0 0│ │0 0 0 1 0 0 1 0 0 0 0│ │0 0 1 0 0 1 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 0 0 0 0│ │0 0 0 1 0 0 0 0 0 0 0│ │0 0 1 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 1 0 0 1 0 0│ │0 0 0 1 1 0 0 1 0 0 0│ │0 0 1 1 0 0 1 0 0 0 0│ │
│ │0 0 0 0 0 0 1 0 0 0 0│ │0 0 0 0 0 1 0 0 0 0 0│ │0 0 0 0 1 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 1 1 1 0 0│ │0 0 0 0 0 1 1 1 0 0 0│ │0 0 0 0 1 1 1 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ └~────────────────────┘ └~────────────────────┘ └~────────────────────┘ │
│ ┌→────────────────────┐ ┌→────────────────────┐ ┌→────────────────────┐ │
│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 1 0 0 0│ │0 0 0 1 0 0 1 0 0 0 0│ │0 0 1 0 0 1 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 0 0 0 0│ │0 0 0 1 0 0 0 0 0 0 0│ │0 0 1 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 1 0 0 1 0 0│ │0 0 0 1 1 0 0 1 0 0 0│ │0 0 1 1 0 0 1 0 0 0 0│ │
│ │0 0 0 0 0 0 1 0 0 0 0│ │0 0 0 0 0 1 0 0 0 0 0│ │0 0 0 0 1 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 1 1 1 0 0│ │0 0 0 0 0 1 1 1 0 0 0│ │0 0 0 0 1 1 1 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ └~────────────────────┘ └~────────────────────┘ └~────────────────────┘ │
│ ┌→────────────────────┐ ┌→────────────────────┐ ┌→────────────────────┐ │
│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ ↓0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 1 0 0 0│ │0 0 0 1 0 0 1 0 0 0 0│ │0 0 1 0 0 1 0 0 0 0 0│ │
│ │0 0 0 0 1 0 0 0 0 0 0│ │0 0 0 1 0 0 0 0 0 0 0│ │0 0 1 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 1 1 0 0 1 0 0│ │0 0 0 1 1 0 0 1 0 0 0│ │0 0 1 1 0 0 1 0 0 0 0│ │
│ │0 0 0 0 0 0 1 0 0 0 0│ │0 0 0 0 0 1 0 0 0 0 0│ │0 0 0 0 1 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 1 1 1 0 0│ │0 0 0 0 0 1 1 1 0 0 0│ │0 0 0 0 1 1 1 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │0 0 0 0 0 0 0 0 0 0 0│ │
│ └~────────────────────┘ └~────────────────────┘ └~────────────────────┘ │
└∊────────────────────────────────────────────────────────────────────────┘

      pow←3 3⍴2*⌽¯1+⍳9
      pow
256 128 64
 32  16  8
  4   2  1

      DISPLAY +/+/pow×¯1 0 1∘.⊖¯1 0 1⌽¨⊂3 pad m
┌──────────────────────────────────────┐
│ ┌→─────────────────────────────────┐ │
│ ↓0 0  0   0   0   0   0   0   0 0 0│ │
│ │0 0  0   0   0   0   0   0   0 0 0│ │
│ │0 0  1   2   4   1   2   4   0 0 0│ │
│ │0 0  9  18  36   8  16  32   0 0 0│ │
│ │0 0 73 147 294  68 129 258   4 0 0│ │
│ │0 0 72 152 305  34  12  16  32 0 0│ │
│ │0 0 64 192 393 275 103 134 260 0 0│ │
│ │0 0  0   0  72 152 312  48  32 0 0│ │
│ │0 0  0   0  64 192 448 384 256 0 0│ │
│ │0 0  0   0   0   0   0   0   0 0 0│ │
│ │0 0  0   0   0   0   0   0   0 0 0│ │
│ └~─────────────────────────────────┘ │
└∊─────────────────────────────────────┘

      lut[1+⊃+/+/pow×¯1 0 1∘.⊖¯1 0 1⌽¨⊂3 pad m]
0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0
0 0 0 1 1 0 1 1 0 0 0
0 0 1 0 0 1 0 1 0 0 0
0 0 1 1 0 1 0 0 1 0 0
0 0 1 1 1 1 0 0 1 0 0
0 0 0 1 0 0 1 1 0 0 0
0 0 0 0 1 1 0 0 1 0 0
0 0 0 0 0 1 0 1 0 0 0
0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0

      plot enhance 3 pad m
.........
..##.##..
.#..#.#..
.##.#..#.
.####..#.
..#..##..
...##..#.
....#.#..
.........
      plot enhance enhance 3 pad m
...........
........#..
..#..#.#...
.#.#...###.
.#...##.#..
.#.....#.#.
..#.#####..
...#.#####.
....##.##..
.....###...
...........

      +/+/enhance enhance 3 pad m
35

⍝ You'll notice soon enough that the actual puzzle input
⍝ for this day contains a twist w.r.t. the infinite size
⍝ of the image. The given image algorithm will flip the
⍝ entire "empty" plane on every step, i.e. after odd steps,
⍝ most of the image pixels will be on (#), and after the
⍝ subsequent, even step, they will be off (.) again.
⍝ Look at the first and last characters of the given image
⍝ algorithm! The first one (at index 0) maps to '#', and
⍝ the last one (at index 511) maps to '.' again.
⍝ 
⍝ The "double-enhance" function takes care of that by
⍝ knitting odd and even steps together, with generous
⍝ padding. The pad and unpad functions both take a left
⍝ parameter now (the desired amount to add/remove).
⍝ 
⍝ As for part 2, we're lucky that our function can readily
⍝ be scaled to 25×2=50 steps total.
⍝ 
⍝ #
